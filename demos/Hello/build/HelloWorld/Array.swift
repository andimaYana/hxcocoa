//
//  Array
//  HelloWorld
//
//  Source generated by Haxe Swift target
//

import Array

extension NSMutableArray ( Array )

	 func hx_objectAtIndex:(Int*)index -> * {
	
	if (index >= [self count]) while ([self count] <= index) [self addObject:[NSNull null]];
	;
	if ([obj isKindOfClass:[NSNull class]]) obj = nil;
	return obj;
}
	 func hx_replaceObjectAtIndex:(Int*)index withObject:(AnyObject*)withObject -> * {
	
	if (index >= [self count]) while ([self count] <= index) [self addObject:[NSNull null]];
	[self replaceObjectAtIndex:index withObject:(withObject==nil?[NSNull null]:withObject)];
}
	 func filter:(id)f -> * {
	
	return nil;
}
	 func map:(id)f -> * {
	
	return nil;
}
	 func iterator -> * {
	
	;
	it.arr = self;
	it.len = self.length;
	return it;
}
	 func splice:(Int*)pos len:(Int*)len -> * {
	
	NSArray *newArray = [self subarrayWithRange:NSMakeRange(pos, len)];
	self removeObjectsInArray:newArray);
	return Array arrayWithArray:newArray);
}
	 func sort:(id)f -> * {
	
}
	 func slice:(Int*)pos end:(Int*)end -> * {
	
	// Optional arguments
	if (!end) end = nil;
	
	return self splice:pos len:end - pos);
}
	 func shift ->  {
	
	if (self.length > 0) {
		
		;
		self removeObjectAtIndex:0);
		return obj;
	}
	return nil;
}
	 func reverse -> * {
	
	;
}
	 func remove:(id)x -> * {
	
	;
	if (containsObject) {
		self removeObject:x);
	}
	return containsObject;
}
	 func unshift:(id)x -> * {
	
	[self insertObject:(x!=nil?x:[NSNull null]) atIndex:0];
}
	 func push:(id)x -> * {
	
	[self addObject:(x!=nil?x:[NSNull null])];
	return self count);
}
	 func pop ->  {
	
	if (self count) == 0) {
		return nil;
	}
	;
	if ([theLastObject isKindOfClass:[NSNull class]]) theLastObject = nil;
	self removeLastObject);
	return theLastObject;
}
	 func toString -> * {
	
	return NSMutableString stringWithString:self description));
}
	 func join:(String*)sep -> * {
	
	return NSMutableString stringWithString:self componentsJoinedByString:sep));
}
	 func lastIndexOf:(id)x fromIndex:(Int*)fromIndex -> * {
	
	// Optional arguments
	if (!fromIndex) fromIndex = nil;
	
	return 0;
}
	 func indexOf:(id)x fromIndex:(Int*)fromIndex -> * {
	
	// Optional arguments
	if (!fromIndex) fromIndex = nil;
	
	return 0;
}
	 func insert:(Int*)pos x:(id)x -> * {
	
	[self insertObject:(x!=nil?x:[NSNull null]) atIndex:pos];
}
	 func copy -> * {
	
	return Array arrayWithArray:self);
}
	 func concat:(Array*)a -> * {
	
	;
	b addObjectsFromArray:self);
	b addObjectsFromArray:a);
	return b;
}
// Getters/setters for property: length
 func Int*) length { return [self count]; }
 func setLength:(Int*)val { nil; }

	 func init -> * {
	
	self = [super init];
	return self;
}

}
