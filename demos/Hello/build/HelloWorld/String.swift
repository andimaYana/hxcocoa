//
//  String
//  HelloWorld
//
//  Source generated by Haxe Swift target
//

import String

extension NSString ( String )

	static func fromCharCode:(Int*)code -> * {
	
	return [NSMutableString stringWithFormat:@"%C", code];
}
	 func toString -> * {
	
	return self description);
}
	 func substring:(Int*)startIndex endIndex:(Int*)endIndex -> * {
	
	// Optional arguments
	if (!endIndex) endIndex = nil;
	
	if (endIndex == nil) {
		endIndex = self.length;
	}
	else {
		if (endIndex < 0) {
			endIndex = 0;
		}
		else {
			if (endIndex > self.length) {
				endIndex = self.length;
			}
		}
	}
	if (startIndex < 0) {
		startIndex = 0;
	}
	else {
		if (startIndex > self.length) {
			startIndex = self.length;
		}
	}
	if (startIndex > endIndex) {
		
		;
		startIndex = endIndex;
		endIndex = tmp;
	}
	return self substr:startIndex len:endIndex - startIndex);
}
	 func substr:(Int*)pos len:(Int*)len -> * {
	
	// Optional arguments
	if (!len) len = nil;
	
	if (len == 0) {
		return @"";
	}
	;
	if (len == nil) {
		len = sl;
	}
	if (pos == nil) {
		pos = 0;
	}
	if (pos != 0 && len < 0) {
		return @"";
	}
	if (pos < 0) {
		
		pos = sl + pos;
		if (pos < 0) {
			pos = 0;
		}
	}
	else {
		if (len < 0) {
			len = sl + len - pos;
		}
	}
	if (pos + len > sl) {
		len = sl - pos;
	}
	if (pos < 0 || len <= 0) {
		return @"";
	}
	return [self substringFromIndex:pos];
}
	 func split:(String*)delimiter -> * {
	
	return self componentsSeparatedByString:delimiter);
}
	 func lastIndexOf:(String*)str startIndex:(Int*)startIndex -> * {
	
	// Optional arguments
	if (!startIndex) startIndex = nil;
	
	if (startIndex == nil) {
		startIndex = 0;
	}
	else {
		startIndex = startIndex;
	}
	NSRange range = [self rangeOfString:str options:NSBackwardsSearch range:NSMakeRange(startIndex,self.length-startIndex)];
	if ( range.location != NSNotFound ) {
		return range.location;
	};
	return -1;
}
	 func indexOf:(String*)str startIndex:(Int*)startIndex -> * {
	
	// Optional arguments
	if (!startIndex) startIndex = nil;
	
	if (startIndex == nil) {
		startIndex = 0;
	}
	else {
		startIndex = startIndex;
	}
	NSRange range = [self rangeOfString:str options:NSLiteralSearch range:NSMakeRange(startIndex,self.length-startIndex)];
	if ( range.location != NSNotFound ) {
		return range.location;
	};
	return -1;
}
	 func charCodeAt:(Int*)index -> * {
	
	return self characterAtIndex:index);
}
	 func charAt:(Int*)index -> * {
	
	return nil;
}
	 func toLowerCase -> * {
	
	return self lowercaseString);
}
	 func toUpperCase -> * {
	
	return self uppercaseString);
}
// Please provide a getterBody for the property: length

	 func init:(String*)string -> * {
	
	self = [super init];
	return self;
}

}
